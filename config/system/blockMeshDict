/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
scale 1;

// ======================================== variables ========================================
cell 80;
ER 120;//17; // Expansion ratio of last cell to first cell ratio
transition_radius 0.8;
boundary_radius 12;

// ======================================== constants ========================================
radius 0.1195;
blend 0.85;
transition 1.5;  // Transition ratio of near field

// ======================================== Arc points ========================================
TA #calc "$transition_radius*$radius";            // Near Arc point
NA #calc "$transition*$TA";                  // transition Arc point
BA #calc "$boundary_radius*$radius";           // Buffer Arc point

// Negate arc points
N_TA #calc "-1.0*$TA"; 
N_NA #calc "-1.0*$NA";
N_BA #calc "-1.0*$BA";

// ======================================== Edge points ========================================
TE #calc "std::sqrt((0.5/($blend*$blend))*$TA*$TA)";      // Near edge corner
NE #calc "std::sqrt(0.5*$NA*$NA)";                        // Boundary grid corner
BE #calc "std::sqrt(0.5*$BA*$BA)";                        // Domain grid corner

// Negate edge points
N_TE #calc "-1.0*$TE"; // edges 
N_NE #calc "-1.0*$NE";
N_BE #calc "-1.0*$BE";

// ======================================== Height variables ========================================
NTOP $NE; //#calc "$radius/1.5";                           // Near Top?
NBOT $NA;                           // Near Bottom ?

// Negate variables
N_NB #calc "-1.0*$NBOT"; // z-axis
N_ER #calc "-1.0*$ER";


// ======================================== Cells ========================================
TC #calc "0.5*$cell";                         // Number of cells from 0 to TA, TC*2 = cell
NC #calc "std::ceil( ($NA-$TA)*($TC/$TA) )"; //(($NA-$TA)/$TA)*($TC*0.5))";

BC 35;//BC #calc "std::ceil( 4*(2*($BA-$NA)*($NC/$NA))/($ER+1) )"; //2*($BA-$NA)/($TA*($ER+1))*($TC*0.5))"; // divide by 0.5 because ncell is diameter while bcell and dcel are radius
ZC 35;//ZC #calc "std::ceil(2*($BA-$TA)/($TA*($ER+1))*($TC*0.5))";







vertices
(
// Near region
/* 00 */    ( $N_TE $N_TE $N_NB) // -x -y -z     
/* 01 */    (  $TE $N_TE $N_NB) //  x -y -z
/* 02 */    (  $TE  $TE $N_NB) //  x  y -z
/* 03 */    ( $N_TE  $TE $N_NB) // -x  y -z

/* 04 */    ( $N_TE $N_TE  $NTOP) // -x -y  z
/* 05 */    (  $TE $N_TE  $NTOP) //  x -y  z
/* 06 */    (  $TE  $TE  $NTOP) //  x  y  z
/* 07 */    ( $N_TE  $TE  $NTOP) // -x  y  z

//Transition Region
/* 08 */    ($N_NE $N_NE $N_NB) // -x -y -z
/* 09 */    ( $NE $N_NE $N_NB) //  x -y -z
/* 10 */    ( $NE  $NE $N_NB) //  x  y -z
/* 11 */    ($N_NE  $NE $N_NB) // -x  y -z
    
/* 12 */    ($N_NE $N_NE  $NTOP) // -x -y  z
/* 13 */    ( $NE $N_NE  $NTOP) //  x -y  z
/* 14 */    ( $NE  $NE  $NTOP) //  x  y  z
/* 15 */    ($N_NE  $NE  $NTOP) // -x  y  z

/* 16 */    ($N_BE $N_BE $N_NB) // -x -y -z
/* 17 */    ( $BE $N_BE $N_NB) //  x -y -z
/* 18 */    ( $BE  $BE $N_NB) //  x  y -z
/* 19 */    ($N_BE  $BE $N_NB) // -x  y -z
    
/* 20 */    ($N_BE $N_BE  $NTOP) // -x -y  z
/* 21 */    ( $BE $N_BE  $NTOP) //  x -y  z
/* 22 */    ( $BE  $BE  $NTOP) //  x  y  z
/* 23 */    ($N_BE  $BE  $NTOP) // -x  y  z
    
// Top multi-block 
/* 24 */    ( $N_TE $N_TE  $BA) // -x -y  z
/* 25 */    (  $TE $N_TE  $BA) //  x -y  z
/* 26 */    (  $TE  $TE  $BA) //  x  y  z
/* 27 */    ( $N_TE  $TE  $BA) // -x  y  z

/* 28 */    ($N_NE $N_NE  $BA) // -x -y  z
/* 29 */    ( $NE $N_NE  $BA) //  x -y  z
/* 30 */    ( $NE  $NE  $BA) //  x  y  z
/* 31 */    ($N_NE  $NE  $BA) // -x  y  z

/* 32 */    ($N_BE $N_BE  $BA) // -x -y  z
/* 33 */    ( $BE $N_BE  $BA) //  x -y  z
/* 34 */    ( $BE  $BE  $BA) //  x  y  z
/* 35 */    ($N_BE  $BE  $BA) // -x  y  z

// Bottom multi-block 
/* 36 */    ( $N_TE $N_TE  $N_BA) // -x -y  -z
/* 37 */    (  $TE $N_TE  $N_BA) //  x -y  -z
/* 38 */    (  $TE  $TE  $N_BA) //  x  y  -z
/* 39 */    ( $N_TE  $TE  $N_BA) // -x  y  -z

/* 40 */    ($N_NE $N_NE  $N_BA) // -x -y  -z
/* 41 */    ( $NE $N_NE  $N_BA) //  x -y  -z
/* 42 */    ( $NE  $NE  $N_BA) //  x  y  -z
/* 43 */    ($N_NE  $NE  $N_BA) // -x  y  -z

/* 44 */    ($N_BE $N_BE  $N_BA) // -x -y  -z
/* 45 */    ( $BE $N_BE  $N_BA) //  x -y  -z
/* 46 */    ( $BE  $BE  $N_BA) //  x  y  -z
/* 47 */    ($N_BE  $BE  $N_BA) // -x  y  -z

);


blocks
(
  // first block - inlet pipe
    hex ( 0  1  2  3  4  5  6  7) ($cell $cell $cell) simpleGrading (1 1 1)
    
    hex ( 1  0  8  9  5  4 12 13) ($cell  $NC $cell) simpleGrading (1 1 1)
    hex ( 2  1  9 10  6  5 13 14) ($cell  $NC $cell) simpleGrading (1 1 1)
    hex ( 3  2 10 11  7  6 14 15) ($cell  $NC $cell) simpleGrading (1 1 1)
    hex ( 0  3 11  8  4  7 15 12) ($cell  $NC $cell) simpleGrading (1 1 1)

    hex ( 9  8 16 17 13 12 20 21) ($cell $BC $cell) simpleGrading (1 $ER 1)
    hex (10  9 17 18 14 13 21 22) ($cell $BC $cell) simpleGrading (1 $ER 1)
    hex (11 10 18 19 15 14 22 23) ($cell $BC $cell) simpleGrading (1 $ER 1)
    hex ( 8 11 19 16 12 15 23 20) ($cell $BC $cell) simpleGrading (1 $ER 1)
    
  // Top block
    hex ( 4  5  6  7 24 25 26 27) ($cell $cell $ZC) simpleGrading (1 1 $ER)
    
    hex ( 5  4 12 13 25 24 28 29) ($cell  $NC $ZC) simpleGrading (1 1 $ER)
    hex ( 6  5 13 14 26 25 29 30) ($cell  $NC $ZC) simpleGrading (1 1 $ER)
    hex ( 7  6 14 15 27 26 30 31) ($cell  $NC $ZC) simpleGrading (1 1 $ER)
    hex ( 4  7 15 12 24 27 31 28) ($cell  $NC $ZC) simpleGrading (1 1 $ER)
 
    hex (13 12 20 21 29 28 32 33) ($cell $BC $ZC) simpleGrading (1 $ER $ER)   
    hex (14 13 21 22 30 29 33 34) ($cell $BC $ZC) simpleGrading (1 $ER $ER)
    hex (15 14 22 23 31 30 34 35) ($cell $BC $ZC) simpleGrading (1 $ER $ER)
    hex (12 15 23 20 28 31 35 32) ($cell $BC $ZC) simpleGrading (1 $ER $ER)

      // Bottom block
    hex ( 36 37 38 39 0 1 2 3) ($cell $cell $ZC) simpleGrading (1 1 $N_ER)
    
    hex ( 37 36 40 41 1 0 8 9) ($cell  $NC $ZC) simpleGrading (1 1 $N_ER)
    hex ( 38 37 41 42 2 1 9 10) ($cell  $NC $ZC) simpleGrading (1 1 $N_ER)
    hex ( 39 38 42 43 3 2 10 11) ($cell  $NC $ZC) simpleGrading (1 1 $N_ER)
    hex ( 36 39 43 40 0 3 11 8) ($cell  $NC $ZC) simpleGrading (1 1 $N_ER)
 
    hex ( 41 40 44 45 9 8 16 17) ($cell $BC $ZC) simpleGrading (1 $ER $N_ER)   
    hex ( 42 41 45 46 10 9 17 18) ($cell $BC $ZC) simpleGrading (1 $ER $N_ER)
    hex ( 43 42 46 47 11 10 18 19) ($cell $BC $ZC) simpleGrading (1 $ER $N_ER)
    hex ( 40 43 47 44 8 11 19 16) ($cell $BC $ZC) simpleGrading (1 $ER $N_ER)
);

edges
(
  // first block
    arc  0  1 ( 0.00 $N_TA $N_NB) // 0+0
    arc  1  2 ( $TA  0.00 $N_NB) // 1+0
    arc  2  3 ( 0.00  $TA $N_NB) // 2+0
    arc  3  0 ($N_TA  0.00 $N_NB) // 3+0
    
    arc  4  5 ( 0.00 $N_TA  $NTOP) // 4+0
    arc  5  6 ( $TA  0.00  $NTOP) // 5+0
    arc  6  7 ( 0.00  $TA  $NTOP) // 6+0
    arc  7  4 ($N_TA  0.00  $NTOP) // 7+0

    arc  8   9 ( 0.000 $N_NA $N_NB) // 0+8
    arc  9  10 ( $NA  0.000 $N_NB) // 1+8
    arc  10 11 ( 0.000  $NA $N_NB) // 2+8
    arc  11  8 ($N_NA  0.000 $N_NB) // 3+8

    arc  12 13 ( 0.000 $N_NA  $NTOP) // 4+8
    arc  13 14 ( $NA  0.000  $NTOP) // 5+8
    arc  14 15 ( 0.000  $NA  $NTOP) // 6+8
    arc  15 12 ($N_NA  0.000  $NTOP) // 7+8

    arc  16 17 ( 0.000 $N_BA $N_NB) // 0+16
    arc  17 18 ( $BA  0.000 $N_NB) // 1+16
    arc  18 19 ( 0.000  $BA $N_NB) // 2+16
    arc  19 16 ($N_BA  0.000 $N_NB) // 3+16

    arc  20 21 ( 0.000 $N_BA  $NTOP) // 4+16
    arc  21 22 ( $BA  0.000  $NTOP) // 5+16
    arc  22 23 ( 0.000  $BA  $NTOP) // 6+16
    arc  23 20 ($N_BA  0.000  $NTOP) // 7+16
    
    
  // second block 
    arc 24 25 ( 0.00 $N_TA  $BA) // 4+0
    arc 25 26 ( $TA  0.00  $BA) // 5+0
    arc 26 27 ( 0.00  $TA  $BA) // 6+0
    arc 27 24 ($N_TA  0.00  $BA) // 7+0

    arc  28 29 ( 0.000 $N_NA  $BA) // 4+8
    arc  29 30 ( $NA  0.000  $BA) // 5+8
    arc  30 31 ( 0.000  $NA  $BA) // 6+8
    arc  31 28 ($N_NA  0.000  $BA) // 7+8

    arc  32 33 ( 0.000 $N_BA  $BA) // 4+16
    arc  33 34 ( $BA  0.000  $BA) // 5+16
    arc  34 35 ( 0.000  $BA  $BA) // 6+16
    arc  35 32 ($N_BA  0.000  $BA) // 7+16

    // bottom block  
    arc 36 37 ( 0.00 $N_TA  $N_BA) // 4+0
    arc 37 38 ( $TA  0.00  $N_BA) // 5+0
    arc 38 39 ( 0.00  $TA  $N_BA) // 6+0
    arc 39 36 ($N_TA  0.00  $N_BA) // 7+0

    arc  40 41 ( 0.000 $N_NA  $N_BA) // 4+8
    arc  41 42 ( $NA  0.000  $N_BA) // 5+8
    arc  42 43 ( 0.000  $NA  $N_BA) // 6+8
    arc  43 40 ($N_NA  0.000  $N_BA) // 7+8

    arc  44 45 ( 0.000 $N_BA  $N_BA) // 4+16
    arc  45 46 ( $BA  0.000  $N_BA) // 5+16
    arc  46 47 ( 0.000  $BA  $N_BA) // 6+16
    arc  47 44 ($N_BA  0.000  $N_BA) // 7+16
);

boundary
(
  outlet
  {
      type patch;
      faces
      (
          // Top
          (24 25 26 27) // Near
          (25 24 28 29) // Transition
          (26 25 29 30)
          (27 26 30 31)
          (24 27 31 28)
          (29 28 32 33) // Boundary
          (30 29 33 34)
          (31 30 34 35)
          (28 31 35 32)

          // wall 
          (20 32 35 23) // top
          (21 33 32 20)
          (22 34 33 21)
          (23 35 34 22)
          (16 20 23 19) // center
          (17 21 20 16)
          (18 22 21 17)
          (19 23 22 18)
          (44 16 19 47) // Bottom
          (45 17 16 44)
          (46 18 17 45)
          (47 19 18 46)

          // Bottom
          (36 39 38 37) // Near
          (36 37 41 40) // Transition
          (37 38 42 41)
          (38 39 43 42)
          (39 36 40 43)
          (40 41 45 44) // Boundary
          (41 42 46 45)
          (42 43 47 46)
          (43 40 44 47)

      );
  }
);

mergePatchPairs
(
);




// ************************************************************************* //
